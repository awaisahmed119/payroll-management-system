/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package forms;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Image;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.Utilities; 
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPTableEvent;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.FileOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javaapplication1.DBconnection;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Awais
 */
public class EmployeeDataView extends javax.swing.JFrame {

     com.mysql.jdbc.Connection conn = new DBconnection().connect();
    /**
     * Creates new form EmployeDataView
     */
    public EmployeeDataView() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
         jTable2.setColumnSelectionAllowed(false);
         updateTable();
         jTable2.getTableHeader().setOpaque(false);
         jTable2.getTableHeader().setBackground(Color.ORANGE);
         jTable2.setBackground(Color.white);
         getContentPane().setBackground(Color.green); 
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("payroll?zeroDateTimeBehavior=convertToNullPU").createEntityManager();
        employeeQuery = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT e FROM Employee e");
        employeeList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : employeeQuery.getResultList();
        employeeQuery1 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT e FROM Employee e");
        employeeList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : employeeQuery1.getResultList();
        employeeQuery2 = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT e FROM Employee e");
        employeeList2 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : employeeQuery2.getResultList();
        search = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        check = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchKeyReleased(evt);
            }
        });
        getContentPane().add(search);
        search.setBounds(0, 120, 118, 20);

        jLabel13.setText("Search Data");
        getContentPane().add(jLabel13);
        jLabel13.setBounds(10, 94, 59, 14);
        getContentPane().add(jLabel14);
        jLabel14.setBounds(200, 88, 0, 0);

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24));
        jLabel15.setText("Employee Record");
        getContentPane().add(jLabel15);
        jLabel15.setBounds(10, 20, 184, 29);

        jScrollPane1.setAutoscrolls(true);

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 18));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jTable2PropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jTable2);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 148, 840, 320);

        check.setBackground(new java.awt.Color(255, 255, 255));
        check.setText("UnCheck All");
        check.setOpaque(false);
        check.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkActionPerformed(evt);
            }
        });
        getContentPane().add(check);
        check.setBounds(741, 112, 89, 30);

        jButton2.setBackground(new java.awt.Color(-16711936,true));
        jButton2.setForeground(new java.awt.Color(-1,true));
        jButton2.setText("Generate PaySlips");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(483, 112, 119, 30);

        jButton1.setText("Generate PayBills");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(618, 112, 115, 30);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/b3.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(-3, -7, 1530, 850);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void updateTable(){
        PreparedStatement pst;
        try{
        //String sql="select id,name,scale,pay,designation,qualification,monetization,accomodation,remaininghba,jdate,incrementcount,totalincrement from employee";
         String sql="select * from employee";
         pst = conn.prepareStatement(sql);
         ResultSet rs = pst.executeQuery();
         jTable2.setModel(DbUtils.resultSetToTableModel(rs));
        }
        
        catch (Exception e) {
            System.out.println("exception " + e);
          
        }
        
         
        
        
    }
    
   
      public void filterTable(String query){
        
        TableModel model =(TableModel) jTable2.getModel();
        TableRowSorter<TableModel> tr=new TableRowSorter<TableModel>(model);
        jTable2.setRowSorter(tr);
        
        tr.setRowFilter(RowFilter.regexFilter(query));
        
    }
  
    private void searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchKeyReleased
        // TODO add your handling code here:
        String s=search.getText().toString();
        filterTable(s);
        
    }//GEN-LAST:event_searchKeyReleased

    private void jTable2PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jTable2PropertyChange
        // TODO add your handling code here:
        
        
         if ("tableCellEditor".equals(evt.getPropertyName())) {
            if (jTable2.isEditing());
               // processEditingStarted();
            else {
               // processEditingStopped();
                doupdate();
                    
                   
                    }
        }
    }//GEN-LAST:event_jTable2PropertyChange

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        printPaySlip();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void checkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkActionPerformed
        // TODO add your handling code here:
        String sql="";
        if(check.getText().toString().equals("UnCheck All")){
            check.setText("Check All");
          
                 sql="update employee set payslip=false";
            
        }
        else if(check.getText().toString().equals("Check All")){
            check.setText("UnCheck All");
          
                 sql="update employee set payslip=true";
             
        }
        try{
            PreparedStatement  preStat =(PreparedStatement) conn.prepareStatement(sql);
             preStat.executeUpdate();
        }
        catch(SQLException e){
             JOptionPane.showMessageDialog(null, "ERROR");
        }
        updateTable();
        
    }//GEN-LAST:event_checkActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
// TODO add your handling code here:
    printPayBill();
}//GEN-LAST:event_jButton1ActionPerformed

  public void doupdate(){
     com.mysql.jdbc.Connection conn = new DBconnection().connect();
     boolean check=false;
        int row = jTable2.getSelectedRow();
        row=jTable2.convertRowIndexToModel(row);
        int col = jTable2.getSelectedColumn();
        col=jTable2.convertColumnIndexToModel(col);
                   String cname= jTable2.getColumnName(col);
                   if(cname.equals("name")){
                       check=true;
                       
                   }
                   
                    String sql = null;
                      try {
                        String val=jTable2.getModel().getValueAt(row, col).toString();
                        String id=jTable2.getModel().getValueAt(row, 0).toString();
                        if(!check){
                            sql ="Update employee set "+cname+"="+"'"+val+"'"+ " where id="+"'"+id+"'" ;
                            PreparedStatement  preStat =(PreparedStatement) conn.prepareStatement(sql);
                            
                            preStat.executeUpdate();
                         
                            preStat.close();
                        }
                            else{
                            sql ="Update employee set "+cname+"="+"'"+val+"'"+ " where id="+"'"+id+"'";
                             String sql1=       "Update empallowances set "+cname+"="+"'"+val+"'"+ " where empid="+"'"+id+"'";
                              String sql2=     " Update empdeduction set "+cname+"="+"'"+val+"'"+ " where empid="+"'"+id+"'";

                        
                            PreparedStatement  preStat =(PreparedStatement) conn.prepareStatement(sql);
                            PreparedStatement  preStat1 =(PreparedStatement) conn.prepareStatement(sql1);
                            PreparedStatement  preStat2 =(PreparedStatement) conn.prepareStatement(sql2);
                            
                            preStat.executeUpdate();
                            preStat1.executeUpdate();
                            preStat2.executeUpdate();
                            preStat.close();
                            preStat1.close();
                            preStat2.close();
                        }
                            JOptionPane.showMessageDialog(null, "Updated");
                                

                      } catch (SQLException insertException) {
                           System.out.println("Error:"+insertException.getMessage());
                           JOptionPane.showMessageDialog(null, "ERROR: Can't Update the Record");
                      }
                      updateTable();

}
  
   protected void printPaySlip() {
        // TODO code application logic here
     
        Document document = new Document() {};
        try{
            PdfWriter.getInstance(document,new FileOutputStream("PaySlip.pdf"));
            
            document.open();
            
            
           
            String SqlQuery1  = "Select * from employee where payslip = true";
            PreparedStatement pst;
            ResultSet rs1 = null;
            try{pst = conn.prepareStatement(SqlQuery1);
            rs1 = pst.executeQuery();
            }
            catch(SQLException e){
                e.printStackTrace();
            }
            while(rs1.next()){
            int basicPay = rs1.getInt("pay");
                
            document.setPageSize(new Rectangle(PageSize.A4));
            Font font = new Font();
            font.setStyle(Font.BOLD);
            font.setSize(12);
            Font font2 = new Font();
            font2.setStyle(Font.UNDERLINE|Font.BOLD);
            font2.setSize(12);
            
            
            Paragraph line2 = new Paragraph();
            
            Image img = Image.getInstance("src/images/header.jpg");
            img.setAlignment(Element.ALIGN_CENTER);
         //   img.scaleToFit(new Rectangle(Utilities.millimetersToPoints(180),Utilities.millimetersToPoints(267)));
            document.add(img);
            
            
           
        
            line2.setFont(font2);
            line2.add("Pay Slip");
            line2.add(Chunk.NEWLINE);
            Date date = new Date();
            line2.add("For the Month of " + months[date.getMonth()] + ", " + (date.getYear()+1900));
            
            
            
            //line1.setAlignment(Element.ALIGN_CENTER);
            line2.setAlignment(Element.ALIGN_CENTER);
            //document.add(line1);
            document.add(line2);
            //document.add(Chunk.NEWLINE);
            document.add(Chunk.NEWLINE);
            
            
            PdfPTable table = new PdfPTable(2);
            table.getDefaultCell().setBorder(0);
            table.setTableEvent(new BorderEvent());
            table.setHorizontalAlignment(Element.ALIGN_CENTER);

            Font fon = new Font();
            fon.setStyle(Font.BOLD);
                
                
            // For Row 1 in Employee Information
            Phrase p1 = new Phrase();
            Chunk c1 = new Chunk("Personal No.");
            Chunk c2 = new Chunk(rs1.getString("Personnel_NO"));
            c2.setFont(fon);
            p1.add(c1);
            p1.add(c2);
            Phrase p2 = new Phrase();
            Chunk c3 = new Chunk("Pay Scale: ");
            Chunk c4 = new Chunk("BS-"+rs1.getString("scale"));
            c4.setFont(fon);
            p2.add(c3);
            p2.add(c4);
           
            table.addCell(p1);
            table.addCell(p2);
            
            table.addCell(new Phrase("                   "));
            table.addCell(new Phrase("                   "));
            
            // For Row 2 Employee Information 
            Phrase p3 = new Phrase();
            Chunk c5 = new Chunk("Name: ");
            Chunk c6 = new Chunk(rs1.getString("name"));
            c6.setFont(fon);
            p3.add(c5);
            p3.add(c6);
            
            Phrase p4 = new Phrase();
            Chunk c7 = new Chunk("CNIC. No :");
            Chunk c8 = new Chunk(" "+rs1.getString("CNIC"));
            c8.setFont(fon);
            p4.add(c7);
            p4.add(c8);
            
            
            table.addCell(p3);
            table.addCell(p4);
            
            table.addCell(new Phrase("                   "));
            table.addCell(new Phrase("                   "));
            
            //For row 3 in Employee Information
            
            Phrase p5 = new Phrase();
            Chunk c9 = new Chunk("Designation:");
            Chunk c10 = new Chunk(" "+rs1.getString("designation"));
            c10.setFont(fon);
            p5.add(c9);
            p5.add(c10);
            
            Phrase p6 = new Phrase();
            Chunk c11 = new Chunk("Nature of Employment:");
            Chunk c12 = new Chunk(" Deputation");
            c12.setFont(fon);
            p6.add(c11);
            p6.add(c12);
            
            
            table.addCell(p5);
            table.addCell(p6);
            
            document.add(table);
            int GrossSalary = 0;
            int totalDeduction= 0;
            
            String empID = rs1.getString("Id");
            //document.add(Chunk.NEWLINE);
            document.add(Chunk.NEWLINE);
            //Allowance ki information ayi gi 
            
             try{
                 JTable atable = new JTable();
                PdfPTable allotable = new PdfPTable(4);
                Chunk a1 = new Chunk("Basic Salary");
                Chunk a2 = new Chunk("Object Code");
                Chunk a3 = new Chunk("Monthly Rate");
                Chunk a4 = new Chunk("Amount");
                
                a1.setFont(fon);
                a2.setFont(fon);
                a3.setFont(fon);
                a4.setFont(fon);
                
                Phrase ap1 = new Phrase();
                Phrase ap2 = new Phrase();
                Phrase ap3 = new Phrase();
                Phrase ap4 = new Phrase();
                
                ap1.add(a1);
                ap2.add(a2);
                ap3.add(a3);
                ap4.add(a4);
                
                allotable.addCell(ap1);
                allotable.addCell(ap2);
                allotable.addCell(ap3);
                allotable.addCell(ap4);
                
               int scale = rs1.getInt("scale");
               if(scale > 15)
               {
                    allotable.addCell(new Phrase("Pay of Officers"));
                    allotable.addCell(new Phrase("A01101"));
               }else
                {
                    allotable.addCell(new Phrase("Pay of Officials"));
                    allotable.addCell(new Phrase("A01151"));
                    
                }
               allotable.addCell(new Phrase(String.valueOf(basicPay)));
               allotable.addCell(new Phrase(String.valueOf(basicPay)));
               
                
                
                String sql=" select a.*,t.TotalAllowance from empallowances a,totals t where a.empid=t.empid And a.empid="+"'"+empID+"'";
                     pst = conn.prepareStatement(sql);
                     ResultSet rs2 = pst.executeQuery();
                     int r,i;
                     atable.setModel(DbUtils.resultSetToTableModel(rs2));
                     try
                     {
                         
                           for  ( r = 0 ; r < atable.getRowCount() ; r++) {   
                           for ( i = 2 ; i < atable.getColumnCount() - 1 ; i++) {
                               try{
                               int val=(Integer) atable.getValueAt(r, i);
                               String cname= atable.getColumnName(i);
                               String[] parts = cname.split("\\_");
                               cname = parts[0];
                               
                               String sqlQuery2 = "Select * from allowanceinfo where head_ID = "+ "'"+cname+"'";
                                pst = conn.prepareStatement(sqlQuery2);
                                ResultSet rs3 = pst.executeQuery();
                                if(rs3.next())
                                {
                                    String cdetail = rs3.getString("head_name");
                                    
                                    allotable.addCell(new Phrase(cdetail));
                                    allotable.addCell(new Phrase(cname));
                                    allotable.addCell(new Phrase(String.valueOf(val)));
                                    allotable.addCell(new Phrase(String.valueOf(val)));
                                }
                               
                               
                               }
                               catch(Exception e)
                               {
                               }
                               
                           }
                      
                     }
                           Chunk total = new Chunk("Total Gross Salary: ");
                           total.setFont(fon);
                           Phrase t = new Phrase(total);
                           PdfPCell cell = new PdfPCell(t);
                           cell.setColspan(3);
                           allotable.addCell(cell);
                           
                           
                           int totala = 0;
                           String q = "select totalAllowance from Totals where empid = " + "'"+empID+"'";
                            pst = conn.prepareStatement(q);
                            ResultSet rs4 = pst.executeQuery();
                          if(rs4.next())
                          {
                                 totala = rs4.getInt("TotalAllowance");
                          }
                          GrossSalary = totala+basicPay;
                          allotable.addCell(new Phrase(String.valueOf(totala+basicPay)));
                         document.add(allotable);
                     }
                     catch(Exception e){
                     }
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
                     
               }
                catch (SQLException e) {
                     //   System.out.println("exception " + e);

                    }
            
            




			
                     // Yahan se deduction wala code shoro ho raha hain


			//document.add(Chunk.NEWLINE);
            document.add(Chunk.NEWLINE);
            //Allowance ki information ayi gi 
            
             try{
                 JTable atable = new JTable();
                PdfPTable allotable = new PdfPTable(3);
                 Chunk name = new Chunk("Deductions");
                           name.setFont(fon);
                           Phrase t1 = new Phrase(name);
                           PdfPCell celln = new PdfPCell(t1);
                           celln.setColspan(3);
                           allotable.addCell(celln);
                Chunk a1 = new Chunk("Detail");
                Chunk a3 = new Chunk("Monthly Rate");
                Chunk a4 = new Chunk("Amount");
                
                a1.setFont(fon);
                a3.setFont(fon);
                a4.setFont(fon);
                
                Phrase ap1 = new Phrase();
                //Phrase ap2 = new Phrase();
                Phrase ap3 = new Phrase();
                Phrase ap4 = new Phrase();
                
                ap1.add(a1);
                //ap2.add(a2);
                ap3.add(a3);
                ap4.add(a4);
                
                allotable.addCell(ap1);
                //allotable.addCell(ap2);
                allotable.addCell(ap3);
                allotable.addCell(ap4);
                
               
            
               
                
                
                String sql=" select a.*,t.TotalDeduction from empdeduction a,totals t where a.empid=t.empid And a.empid="+"'"+empID+"'";
                     pst = conn.prepareStatement(sql);
                     ResultSet rs2 = pst.executeQuery();
                     int r,i;
                     atable.setModel(DbUtils.resultSetToTableModel(rs2));
                     try
                     {
                         
                           for  ( r = 0 ; r < atable.getRowCount() ; r++) {   
                           for ( i = 2 ; i < atable.getColumnCount() - 1 ; i++) {
                               try{
                               int val=(Integer) atable.getValueAt(r, i);
                               String cname= atable.getColumnName(i);
                               String[] parts = cname.split("\\_");
                               cname = parts[0];
                               
                              
                                    allotable.addCell(new Phrase(cname));
                                    allotable.addCell(new Phrase(String.valueOf(val)));
                                    allotable.addCell(new Phrase(String.valueOf(val)));
                                
                               
                               
                               }
                               catch(Exception e)
                               {
                               }
                               
                           }
                      
                     }
                           Chunk total = new Chunk("Total Deductions: ");
                           total.setFont(fon);
                           Phrase t = new Phrase(total);
                           PdfPCell cell = new PdfPCell(t);
                           cell.setColspan(2);
                           allotable.addCell(cell);
                           
                           
                           int totala = 0;
                           String q = "select totalDeduction from Totals where empid = " + "'"+empID+"'";
                            pst = conn.prepareStatement(q);
                            ResultSet rs4 = pst.executeQuery();
                          if(rs4.next())
                          {
                                 totala = rs4.getInt("TotalDeduction");
                          }
                          totalDeduction = totala;
                          allotable.addCell(new Phrase(String.valueOf(totala)));
                         document.add(allotable);
                     }
                     catch(Exception e){
                     }
                    
                     
                     
                     
               }
                catch (SQLException e) {
                     //   System.out.println("exception " + e);

                    }
            
             PdfPTable finalt = new PdfPTable(4);
             Chunk total = new Chunk("Net Salary: ");
                           total.setFont(fon);
                           Phrase t = new Phrase(total);
                           PdfPCell cell = new PdfPCell(t);
                           cell.setColspan(3);
                           finalt.addCell(cell); 
           
            finalt.addCell(new Phrase(String.valueOf(GrossSalary - totalDeduction)));
            document.add(Chunk.NEWLINE);
            document.add(finalt);
            document.newPage();
            }
            
            
            document.close();
            
        }catch(Exception e){
            e.printStackTrace();

       }
        
       
    }


  protected void printPayBill() {
        // TODO code application logic here
        
    Document document = new Document() {};
    try{
		Date date = new Date();
        PdfWriter.getInstance(document,new FileOutputStream("PayBill_"+ months[date.getMonth()] + "," + (date.getYear()+1900) + ".pdf"));

        document.open();

        String SqlQuery1  = "Select * from employee where payslip = true";
        PreparedStatement pst;
        ResultSet rs1 = null;
        try{pst = conn.prepareStatement(SqlQuery1);
        rs1 = pst.executeQuery();
        }
        catch(SQLException e){
            e.printStackTrace();
        }
        while(rs1.next())
        {
        int basicPay = rs1.getInt("pay");

        document.setPageSize(new Rectangle(PageSize.A4));
        Font font = new Font();
        font.setStyle(Font.BOLD);
        font.setSize(12);
        Font font2 = new Font();
        font2.setStyle(Font.UNDERLINE|Font.BOLD);
        font2.setSize(12);


        Paragraph line2 = new Paragraph();

        Image img = Image.getInstance("src/images/header.jpg");
        img.setAlignment(Element.ALIGN_CENTER);
       // img.scaleToFit(new Rectangle(Utilities.millimetersToPoints(180),Utilities.millimetersToPoints(267)));
        document.add(img);

        line2.setFont(font2);
        line2.add("Pay Bill");
        line2.add(Chunk.NEWLINE);
        line2.add("For the Month of " + months[date.getMonth()] + ", " + (date.getYear()+1900));



        //line1.setAlignment(Element.ALIGN_CENTER);
        line2.setAlignment(Element.ALIGN_CENTER);
        //document.add(line1);
        document.add(line2);
        //document.add(Chunk.NEWLINE);
        document.add(Chunk.NEWLINE);


        PdfPTable table = new PdfPTable(2);
        table.setHorizontalAlignment(Element.ALIGN_CENTER);

        Font fon = new Font();
        fon.setStyle(Font.BOLD);


        // For Row 1 in Employee Information
        Phrase p1 = new Phrase();
        Chunk c1 = new Chunk("Personal No.");
        Chunk c2 = new Chunk(rs1.getString("Personnel_NO"));
        c2.setFont(fon);
        p1.add(c1);
        p1.add(c2);
        Phrase p2 = new Phrase();
        Chunk c3 = new Chunk("Pay Scale: ");
        Chunk c4 = new Chunk("BS-"+rs1.getString("scale"));
        c4.setFont(fon);
        p2.add(c3);
        p2.add(c4);

        table.addCell(p1);
        table.addCell(p2);

        // For Row 2 Employee Information 
        Phrase p3 = new Phrase();
        Chunk c5 = new Chunk("Name: ");
        Chunk c6 = new Chunk(rs1.getString("name"));
        c6.setFont(fon);
        p3.add(c5);
        p3.add(c6);

        Phrase p4 = new Phrase();
        Chunk c7 = new Chunk("CNIC. No :");
        Chunk c8 = new Chunk(" "+rs1.getString("CNIC"));
        c8.setFont(fon);
        p4.add(c7);
        p4.add(c8);


        table.addCell(p3);
        table.addCell(p4);

        //For row 3 in Employee Information

        Phrase p5 = new Phrase();
        Chunk c9 = new Chunk("Designation:");
        Chunk c10 = new Chunk(" "+rs1.getString("designation"));
        c10.setFont(fon);
        p5.add(c9);
        p5.add(c10);

        Phrase p6 = new Phrase();
        Chunk c11 = new Chunk("Nature of Employment:");
        Chunk c12 = new Chunk(" Deputation");
        c12.setFont(fon);
        p6.add(c11);
        p6.add(c12);


        table.addCell(p5);
        table.addCell(p6);

        document.add(table);
        int GrossSalary = 0;
        int totalDeduction= 0;

        String empID = rs1.getString("Id");
        //document.add(Chunk.NEWLINE);
        document.add(Chunk.NEWLINE);
		
	//creating table 
	PdfPTable allotable = new PdfPTable(4);
		
        //Allowance ki information ayi gi 
         try{
             JTable atable = new JTable();
            Chunk a1 = new Chunk("Basic Salary");
            Chunk a2 = new Chunk("Object Code");
            Chunk a3 = new Chunk("Monthly Rate");
            Chunk a4 = new Chunk("Amount");

            a1.setFont(fon);
            a2.setFont(fon);
            a3.setFont(fon);
            a4.setFont(fon);

            Phrase ap1 = new Phrase();
            Phrase ap2 = new Phrase();
            Phrase ap3 = new Phrase();
            Phrase ap4 = new Phrase();

            ap1.add(a1);
            ap2.add(a2);
            ap3.add(a3);
            ap4.add(a4);

            allotable.addCell(ap1);
            allotable.addCell(ap2);
            allotable.addCell(ap3);
            allotable.addCell(ap4);

           int scale = rs1.getInt("scale");
           if(scale > 15)
           {
                allotable.addCell(new Phrase("Pay of Officers"));
                allotable.addCell(new Phrase("A01101"));
           }else
            {
                allotable.addCell(new Phrase("Pay of Officials"));
                allotable.addCell(new Phrase("A01151"));

            }
           allotable.addCell(new Phrase(String.valueOf(basicPay)));
           allotable.addCell(new Phrase(String.valueOf(basicPay)));
            String sql=" select a.*,t.TotalAllowance from empallowances a,totals t where a.empid=t.empid And a.empid="+"'"+empID+"'";
                 pst = conn.prepareStatement(sql);
                 ResultSet rs2 = pst.executeQuery();
                 int r,i;
                 atable.setModel(DbUtils.resultSetToTableModel(rs2));
                 try
                 {

                       for  ( r = 0 ; r < atable.getRowCount() ; r++) {   
                       for ( i = 2 ; i < atable.getColumnCount() - 1 ; i++) {
                           try{
                           int val=(Integer) atable.getValueAt(r, i);
                           String cname= atable.getColumnName(i);
                           String[] parts = cname.split("\\_");
                           cname = parts[0];

                           String sqlQuery2 = "Select * from allowanceinfo where head_ID = "+ "'"+cname+"'";
                            pst = conn.prepareStatement(sqlQuery2);
                            ResultSet rs3 = pst.executeQuery();
                            if(rs3.next())
                            {
                                String cdetail = rs3.getString("head_name");

                                allotable.addCell(new Phrase(cdetail));
                                allotable.addCell(new Phrase(cname));
                                allotable.addCell(new Phrase(String.valueOf(val)));
                                allotable.addCell(new Phrase(String.valueOf(val)));
                            }
                           }
                           catch(Exception e)
                           {
                           }

                       }

                 }
                       Chunk total = new Chunk("Total Gross Salary: ");
                       total.setFont(fon);
                       Phrase t = new Phrase(total);
                       PdfPCell cell = new PdfPCell(t);
                       cell.setColspan(3);
                       allotable.addCell(cell);


                       int totala = 0;
                       String q = "select totalAllowance from Totals where empid = " + "'"+empID+"'";
                        pst = conn.prepareStatement(q);
                        ResultSet rs4 = pst.executeQuery();
                      if(rs4.next())
                      {
                             totala = rs4.getInt("TotalAllowance");
                      }
                      GrossSalary = totala+basicPay;
                      allotable.addCell(new Phrase(String.valueOf(totala+basicPay)));
                     document.add(allotable);
                 }
                 catch(Exception e){
                 }
           }
            catch (SQLException e) {
                 //   System.out.println("exception " + e);

                }
                 // Yahan se deduction wala code shoro ho raha hain
                    //document.add(Chunk.NEWLINE)
        //Deductions ki information ayi gi 

         try{
             JTable atable = new JTable();
             Chunk name = new Chunk("Deductions");
                       name.setFont(fon);
                       Phrase t1 = new Phrase(name);
                       PdfPCell celln = new PdfPCell(t1);
                       celln.setColspan(4);
                       allotable.addCell(celln);
           
            Chunk a3 = new Chunk("Monthly Rate");
            Chunk a4 = new Chunk("Amount");
			
            Phrase t = new Phrase("Detail");
			t.setFont(fon);
            PdfPCell cell = new PdfPCell(t);
            cell.setColspan(2);
            allotable.addCell(cell);
            
            a3.setFont(fon);
            a4.setFont(fon);

            Phrase ap3 = new Phrase();
            Phrase ap4 = new Phrase();

            ap3.add(a3);
            ap4.add(a4);

            allotable.addCell(ap3);
            allotable.addCell(ap4);

            String sql=" select a.*,t.TotalDeduction from empdeduction a,totals t where a.empid=t.empid And a.empid="+"'"+empID+"'";
                 pst = conn.prepareStatement(sql);
                 ResultSet rs2 = pst.executeQuery();
                 int r,i;
                 atable.setModel(DbUtils.resultSetToTableModel(rs2));
                 try
                 {

                       for  ( r = 0 ; r < atable.getRowCount() ; r++) {   
                       for ( i = 2 ; i < atable.getColumnCount() - 1 ; i++) {
                           try{
                           int val=(Integer) atable.getValueAt(r, i);
                           String cname= atable.getColumnName(i);
                           String[] parts = cname.split("\\_");
                           cname = parts[0];
			   Phrase t2 = new Phrase(cname);
			   PdfPCell cell2 = new PdfPCell(t2);
			   cell.setColspan(2);
			   allotable.addCell(cell2);
                                allotable.addCell(new Phrase(String.valueOf(val)));
                                allotable.addCell(new Phrase(String.valueOf(val)));
                           }
                           catch(Exception e)
                           {
                           }

                       }

                 }
                       Chunk total = new Chunk("Total Deductions: ");
                       total.setFont(fon);
                       Phrase t3 = new Phrase(total);
                       PdfPCell cell3 = new PdfPCell(t3);
                       cell.setColspan(2);
                       allotable.addCell(cell3);


                       int totala = 0;
                       String q = "select totalDeduction from Totals where empid = " + "'"+empID+"'";
                        pst = conn.prepareStatement(q);
                        ResultSet rs4 = pst.executeQuery();
                      if(rs4.next())
                      {
                             totala = rs4.getInt("TotalDeduction");
                      }
                      totalDeduction = totala;
                      allotable.addCell(new Phrase(String.valueOf(totala)));
                     document.add(allotable);
                 }
                 catch(Exception e){
                 }
           }
            catch (SQLException e) {
                 //   System.out.println("exception " + e);

                }

         PdfPTable finalt = new PdfPTable(4);
         Chunk total = new Chunk("Net Salary: ");
                       total.setFont(fon);
                       Phrase t = new Phrase(total);
                       PdfPCell cell = new PdfPCell(t);
                       cell.setColspan(3);
                       finalt.addCell(cell); 

        finalt.addCell(new Phrase(String.valueOf(GrossSalary - totalDeduction)));
        document.add(Chunk.NEWLINE);
        document.add(finalt);
        //for Signature 
           document.add(Chunk.NEWLINE);
           document.add(Chunk.NEWLINE);
           document.add(Chunk.NEWLINE);
           
           Paragraph sig = new Paragraph("Signature");
           Font f1 = new Font();
           f1.setSize(14);
           f1.setStyle(Font.BOLD);
           sig.setFont(f1);
           sig.setAlignment(Element.ALIGN_RIGHT);
           document.add(sig);
        document.newPage();
        }
        document.close();

    }catch(Exception e){
        e.printStackTrace();
    }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeDataView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeDataView().setVisible(true);
            }
        });
        
        
        
    }

    
     public static class BorderEvent implements PdfPTableEvent {
    public void tableLayout(PdfPTable table, float[][] widths,
    float[] heights, int headerRows, int rowStart,
    PdfContentByte[] canvases) {
        float width[] = widths[0];
        float x1 = width[0];
        float x2 = width[width.length - 1];
        float y1 = heights[0];
        float y2 = heights[heights.length - 1];
        PdfContentByte cb = canvases[PdfPTable.LINECANVAS];
        cb.rectangle(x1, y1, x2 - x1, y2 - y1);
        cb.stroke();
        cb.resetRGBColorStroke();
    }
     }
     
   String[] months = {"January",      
   "February",
   "March",        
   "April",        
   "May",          
   "June",         
   "July",         
   "August",       
   "September",    
   "October",      
   "November",     
   "December"};
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton check;
    private java.util.List<forms.Employee> employeeList;
    private java.util.List<forms.Employee> employeeList1;
    private java.util.List<forms.Employee> employeeList2;
    private javax.persistence.Query employeeQuery;
    private javax.persistence.Query employeeQuery1;
    private javax.persistence.Query employeeQuery2;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables
}
